{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\n\n// const API_URL = process.env.MODE === \"development\" ? \"http://localhost:5000/auth\" : \"/auth\"\nconst USER_API = \"http://localhost:5000/auth\";\nconst adm_API = \"http://localhost:5000/admin\";\nexport const useAuthStore = create(set => ({\n  //a one argument and a callback function \n  user: {},\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  messages: null,\n  isCheckingAuth: true,\n  message: null,\n  email: \"\" || \"makanda@gmail.com\",\n  // signup part\n  signup: async (firstName, lastName, admNo, year, email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(\"http://localhost:5000/auth/signup\", {\n        firstName,\n        lastName,\n        admNo,\n        year,\n        email,\n        password\n      }); //we sending this to the server\n      set({\n        user: response.data.user,\n        isLoading: false\n      }); //updatyes the state of the useAuthstore \n    } catch (error) {\n      set({\n        error: error.response.data.message || \"Error signing up\",\n        isLoading: false\n      }); // Error: show error message\n      throw error;\n    }\n  },\n  //admin signup\n  // adminSignup = async ()\n  //adminLogin\n  adminLogin: async (email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${adm_API}/adminLogin`, {\n        email,\n        password\n      });\n      set({\n        admin: response.data.admin,\n        email: email,\n        isLoading: false,\n        isAuthenticated: true,\n        error: null\n      });\n    } catch (error) {\n      set({\n        error: error.response.data.message || \"Error loging up\",\n        isLoading: false\n      }); // Error: show error message\n      throw error;\n    }\n  },\n  login: async (admNo, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(\"http://localhost:5000/auth/login\", {\n        admNo,\n        password\n      });\n      localStorage.setItem(\"token\", response.data.token);\n      set({\n        user: response.data.user,\n        // Set the entire user object\n        email: response.data.user.email,\n        // Ensure the email is set explicitly in the store\n        isAuthenticated: true,\n        error: null,\n        isLoading: false\n      });\n      console.log(`check, ${JSON.stringify(response.data)}`);\n    } catch (error) {\n      set({\n        error: error.response.data.message || \"Error logging in\",\n        isLoading: false\n      });\n      throw error;\n    }\n  }\n  // login: async (admNo, password) => {\n  //     set({ isLoading: true, error: null })\n  //     try {\n  //         const response = await axios.post(\"http://localhost:5000/auth/login\", { admNo, password });\n  //         localStorage.setItem(\"token\", response.data.token);\n  //         localStorage.setItem(\"email\", response.data.email);\n  //         set({ user: response.data.user, email: response.data.user.email, isAuthenticated: true, error: null, isLoading: false })\n  //     } catch (error) {\n  //         set({ error: error.response.data.message || \"Error loging up\", isLoading: false });  // Error: show error message\n  //         throw error;\n  //     }\n  // },\n\n  //adminLogin\n  // adminlogin: async (email, password) => {\n  //     set({ isLoading: true, error: null })\n  //     try {\n  //         const response = await axios.post(`${API_URL}/adminlogin`, { email, password });\n  //         localStorage.setItem(\"token\", response.data.token);\n  //         set({ admin: response.data.admin, isAuthenticated: true, error: null, isLoading: false })\n  //     } catch (error) {\n  //         set({ error: error.response.data.message || \"Error loging up\", isLoading: false });  // Error: show error message\n  //         throw error;\n  //     }\n  // },\n  //logout part\n  ,\n\n  logout: async () => {\n    try {\n      await axios.post(`${USER_API}/logout`, null, {\n        withCredentials: true\n      });\n      set({\n        user: null,\n        isAuthenticated: false,\n        isCheckingAuth: false\n      });\n    } catch (error) {\n      set({\n        error: error.response.data.message || \"Error loginout\",\n        isLoading: false\n      }); // Error: show error message\n      throw error;\n    }\n  },\n  // sending reset-password \n  forgotPassword: async email => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${USER_API}/password`, {\n        email\n      });\n      set({\n        message: response.data.message,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: error.response.data.message || \"Error sending reset password email\"\n      });\n      throw error;\n    }\n  },\n  //reset password\n  // resetPassword: async (token, password) => {\n  //     try {\n  //         const response = await axios.post(`http://localhost:5000/auth/reset-password/${token}`, { password });\n  //         set({ message: response.data.message, isLoading: false })\n  //     } catch (error) {\n  //         set({\n  //             isLoading: false,\n  //             error: error.response.data.message || \"Error resetting password\",\n  //         });\n  //         throw error;\n  //     }\n  // },\n\n  //verfy email\n  // verifyEmail: async (code) => {\n  //     set({ isLoading: true, error: null });\n  //     try {\n  //         const response = await axios.post(\"http://localhost:5000/auth/verify-email\", { code })\n  //         set({ user: response.data.user, isAuthenticated: true })\n  //         return response.data;\n  //     } catch (error) {\n  //         set({ error: error.response.data.message || \"Error verifyng your email\", isLoading: false });  // Error: show error message\n  //         throw error;\n  //     }\n  // },\n\n  // //chechking authoticTED users\n  checkAuth: async () => {\n    set({\n      isCheckingAuth: true,\n      error: null\n    });\n    try {\n      const token = localStorage.getItem(\"token\"); // Retrieve the token from local storage\n      const response = await axios.get(\"http://localhost:5000/auth/check-auth\", {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the Authorization header\n        },\n        withCredentials: true\n      });\n      set({\n        user: response.data.user,\n        isAuthenticated: true,\n        isCheckingAuth: false\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        isAuthenticated: false,\n        isCheckingAuth: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to authenticate\"\n      });\n    }\n  },\n  getProjects: async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/task/takeTask');\n      set({\n        tasks: response.data.tasks\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  postTask: async (title, description, date, level) => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/task/makeTask\", {\n        title,\n        description,\n        date,\n        level\n      });\n      set({\n        task: response.task\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}));","map":{"version":3,"names":["create","axios","USER_API","adm_API","useAuthStore","set","user","isAuthenticated","isLoading","error","messages","isCheckingAuth","message","email","signup","firstName","lastName","admNo","year","password","response","post","data","adminLogin","admin","login","localStorage","setItem","token","console","log","JSON","stringify","logout","withCredentials","forgotPassword","checkAuth","getItem","get","headers","Authorization","_error$response","_error$response$data","getProjects","tasks","postTask","title","description","date","level","task"],"sources":["C:/Users/user/Desktop/GIS/client/src/store/auth.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport axios from 'axios'\r\n\r\n// const API_URL = process.env.MODE === \"development\" ? \"http://localhost:5000/auth\" : \"/auth\"\r\nconst USER_API = \"http://localhost:5000/auth\"\r\nconst adm_API = \"http://localhost:5000/admin\"\r\nexport const useAuthStore = create((set) => ({ //a one argument and a callback function \r\n    user: {},\r\n    isAuthenticated: false,\r\n    isLoading: false,\r\n    error: null,\r\n    messages: null,\r\n    isCheckingAuth: true,\r\n    message: null,\r\n    email: \"\" || \"makanda@gmail.com\",\r\n    // signup part\r\n    signup: async (firstName, lastName, admNo, year, email, password) => {\r\n        set({ isLoading: true, error: null })\r\n        try {\r\n\r\n            const response = await axios.post(\"http://localhost:5000/auth/signup\", { firstName, lastName, admNo, year, email, password }); //we sending this to the server\r\n            set({ user: response.data.user, isLoading: false })//updatyes the state of the useAuthstore \r\n        } catch (error) {\r\n            set({ error: error.response.data.message || \"Error signing up\", isLoading: false });  // Error: show error message\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    //admin signup\r\n    // adminSignup = async ()\r\n    //adminLogin\r\n    adminLogin: async (email, password) => {\r\n        set({ isLoading: true, error: null })\r\n        try {\r\n            const response = await axios.post(`${adm_API}/adminLogin`, { email, password })\r\n            set({ admin: response.data.admin, email: email, isLoading: false, isAuthenticated: true, error: null })\r\n        } catch (error) {\r\n            set({ error: error.response.data.message || \"Error loging up\", isLoading: false });  // Error: show error message\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    login: async (admNo, password) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n            const response = await axios.post(\"http://localhost:5000/auth/login\", { admNo, password });\r\n            localStorage.setItem(\"token\", response.data.token);\r\n            set({\r\n                user: response.data.user, // Set the entire user object\r\n                email: response.data.user.email, // Ensure the email is set explicitly in the store\r\n                isAuthenticated: true,\r\n                error: null,\r\n                isLoading: false\r\n            });\r\n            console.log(`check, ${JSON.stringify(response.data)}`);\r\n        } catch (error) {\r\n            set({ error: error.response.data.message || \"Error logging in\", isLoading: false });\r\n            throw error;\r\n        }\r\n    }\r\n    // login: async (admNo, password) => {\r\n    //     set({ isLoading: true, error: null })\r\n    //     try {\r\n    //         const response = await axios.post(\"http://localhost:5000/auth/login\", { admNo, password });\r\n    //         localStorage.setItem(\"token\", response.data.token);\r\n    //         localStorage.setItem(\"email\", response.data.email);\r\n    //         set({ user: response.data.user, email: response.data.user.email, isAuthenticated: true, error: null, isLoading: false })\r\n    //     } catch (error) {\r\n    //         set({ error: error.response.data.message || \"Error loging up\", isLoading: false });  // Error: show error message\r\n    //         throw error;\r\n    //     }\r\n    // },\r\n\r\n    //adminLogin\r\n    // adminlogin: async (email, password) => {\r\n    //     set({ isLoading: true, error: null })\r\n    //     try {\r\n    //         const response = await axios.post(`${API_URL}/adminlogin`, { email, password });\r\n    //         localStorage.setItem(\"token\", response.data.token);\r\n    //         set({ admin: response.data.admin, isAuthenticated: true, error: null, isLoading: false })\r\n    //     } catch (error) {\r\n    //         set({ error: error.response.data.message || \"Error loging up\", isLoading: false });  // Error: show error message\r\n    //         throw error;\r\n    //     }\r\n    // },\r\n    //logout part\r\n    ,\r\n    logout: async () => {\r\n        try {\r\n            await axios.post(`${USER_API}/logout`, null, { withCredentials: true })\r\n            set({ user: null, isAuthenticated: false, isCheckingAuth: false },)\r\n        } catch (error) {\r\n            set({ error: error.response.data.message || \"Error loginout\", isLoading: false });  // Error: show error message\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // sending reset-password \r\n    forgotPassword: async (email) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n            const response = await axios.post(`${USER_API}/password`, { email });\r\n            set({ message: response.data.message, isLoading: false });\r\n        } catch (error) {\r\n            set({\r\n                isLoading: false,\r\n                error: error.response.data.message || \"Error sending reset password email\",\r\n            });\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    //reset password\r\n    // resetPassword: async (token, password) => {\r\n    //     try {\r\n    //         const response = await axios.post(`http://localhost:5000/auth/reset-password/${token}`, { password });\r\n    //         set({ message: response.data.message, isLoading: false })\r\n    //     } catch (error) {\r\n    //         set({\r\n    //             isLoading: false,\r\n    //             error: error.response.data.message || \"Error resetting password\",\r\n    //         });\r\n    //         throw error;\r\n    //     }\r\n    // },\r\n\r\n    //verfy email\r\n    // verifyEmail: async (code) => {\r\n    //     set({ isLoading: true, error: null });\r\n    //     try {\r\n    //         const response = await axios.post(\"http://localhost:5000/auth/verify-email\", { code })\r\n    //         set({ user: response.data.user, isAuthenticated: true })\r\n    //         return response.data;\r\n    //     } catch (error) {\r\n    //         set({ error: error.response.data.message || \"Error verifyng your email\", isLoading: false });  // Error: show error message\r\n    //         throw error;\r\n    //     }\r\n    // },\r\n\r\n    // //chechking authoticTED users\r\n    checkAuth: async () => {\r\n        set({ isCheckingAuth: true, error: null })\r\n        try {\r\n            const token = localStorage.getItem(\"token\"); // Retrieve the token from local storage\r\n            const response = await axios.get(\"http://localhost:5000/auth/check-auth\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the Authorization header\r\n                },\r\n                withCredentials: true\r\n            })\r\n            set({ user: response.data.user, isAuthenticated: true, isCheckingAuth: false });\r\n        } catch (error) {\r\n            set({\r\n                isAuthenticated: false,\r\n                isCheckingAuth: false,\r\n                error: error.response?.data?.message || \"Failed to authenticate\",\r\n            });\r\n        }\r\n    },\r\n\r\n    getProjects: async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/task/takeTask')\r\n            set({ tasks: response.data.tasks })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n\r\n    postTask: async (title, description, date, level) => {\r\n        try {\r\n            const response = await axios.post(\"http://localhost:5000/task/makeTask\", { title, description, date, level })\r\n            set({ task: response.task })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}))\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,4BAA4B;AAC7C,MAAMC,OAAO,GAAG,6BAA6B;AAC7C,OAAO,MAAMC,YAAY,GAAGJ,MAAM,CAAEK,GAAG,KAAM;EAAE;EAC3CC,IAAI,EAAE,CAAC,CAAC;EACRC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,IAAI;EACdC,cAAc,EAAE,IAAI;EACpBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,EAAE,IAAI,mBAAmB;EAChC;EACAC,MAAM,EAAE,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAEL,KAAK,EAAEM,QAAQ,KAAK;IACjEd,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MAEA,MAAMW,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,mCAAmC,EAAE;QAAEN,SAAS;QAAEC,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEL,KAAK;QAAEM;MAAS,CAAC,CAAC,CAAC,CAAC;MAC/Hd,GAAG,CAAC;QAAEC,IAAI,EAAEc,QAAQ,CAACE,IAAI,CAAChB,IAAI;QAAEE,SAAS,EAAE;MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZJ,GAAG,CAAC;QAAEI,KAAK,EAAEA,KAAK,CAACW,QAAQ,CAACE,IAAI,CAACV,OAAO,IAAI,kBAAkB;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC,CAAE;MACtF,MAAMC,KAAK;IACf;EACJ,CAAC;EAED;EACA;EACA;EACAc,UAAU,EAAE,MAAAA,CAAOV,KAAK,EAAEM,QAAQ,KAAK;IACnCd,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGlB,OAAO,aAAa,EAAE;QAAEU,KAAK;QAAEM;MAAS,CAAC,CAAC;MAC/Ed,GAAG,CAAC;QAAEmB,KAAK,EAAEJ,QAAQ,CAACE,IAAI,CAACE,KAAK;QAAEX,KAAK,EAAEA,KAAK;QAAEL,SAAS,EAAE,KAAK;QAAED,eAAe,EAAE,IAAI;QAAEE,KAAK,EAAE;MAAK,CAAC,CAAC;IAC3G,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZJ,GAAG,CAAC;QAAEI,KAAK,EAAEA,KAAK,CAACW,QAAQ,CAACE,IAAI,CAACV,OAAO,IAAI,iBAAiB;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC,CAAE;MACrF,MAAMC,KAAK;IACf;EACJ,CAAC;EAEDgB,KAAK,EAAE,MAAAA,CAAOR,KAAK,EAAEE,QAAQ,KAAK;IAC9Bd,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,kCAAkC,EAAE;QAAEJ,KAAK;QAAEE;MAAS,CAAC,CAAC;MAC1FO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,QAAQ,CAACE,IAAI,CAACM,KAAK,CAAC;MAClDvB,GAAG,CAAC;QACAC,IAAI,EAAEc,QAAQ,CAACE,IAAI,CAAChB,IAAI;QAAE;QAC1BO,KAAK,EAAEO,QAAQ,CAACE,IAAI,CAAChB,IAAI,CAACO,KAAK;QAAE;QACjCN,eAAe,EAAE,IAAI;QACrBE,KAAK,EAAE,IAAI;QACXD,SAAS,EAAE;MACf,CAAC,CAAC;MACFqB,OAAO,CAACC,GAAG,CAAC,UAAUC,IAAI,CAACC,SAAS,CAACZ,QAAQ,CAACE,IAAI,CAAC,EAAE,CAAC;IAC1D,CAAC,CAAC,OAAOb,KAAK,EAAE;MACZJ,GAAG,CAAC;QAAEI,KAAK,EAAEA,KAAK,CAACW,QAAQ,CAACE,IAAI,CAACV,OAAO,IAAI,kBAAkB;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC;MACnF,MAAMC,KAAK;IACf;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;;EAEAwB,MAAM,EAAE,MAAAA,CAAA,KAAY;IAChB,IAAI;MACA,MAAMhC,KAAK,CAACoB,IAAI,CAAC,GAAGnB,QAAQ,SAAS,EAAE,IAAI,EAAE;QAAEgC,eAAe,EAAE;MAAK,CAAC,CAAC;MACvE7B,GAAG,CAAC;QAAEC,IAAI,EAAE,IAAI;QAAEC,eAAe,EAAE,KAAK;QAAEI,cAAc,EAAE;MAAM,CAAE,CAAC;IACvE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZJ,GAAG,CAAC;QAAEI,KAAK,EAAEA,KAAK,CAACW,QAAQ,CAACE,IAAI,CAACV,OAAO,IAAI,gBAAgB;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC,CAAE;MACpF,MAAMC,KAAK;IACf;EACJ,CAAC;EAED;EACA0B,cAAc,EAAE,MAAOtB,KAAK,IAAK;IAC7BR,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,QAAQ,WAAW,EAAE;QAAEW;MAAM,CAAC,CAAC;MACpER,GAAG,CAAC;QAAEO,OAAO,EAAEQ,QAAQ,CAACE,IAAI,CAACV,OAAO;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZJ,GAAG,CAAC;QACAG,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEA,KAAK,CAACW,QAAQ,CAACE,IAAI,CAACV,OAAO,IAAI;MAC1C,CAAC,CAAC;MACF,MAAMH,KAAK;IACf;EACJ,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA2B,SAAS,EAAE,MAAAA,CAAA,KAAY;IACnB/B,GAAG,CAAC;MAAEM,cAAc,EAAE,IAAI;MAAEF,KAAK,EAAE;IAAK,CAAC,CAAC;IAC1C,IAAI;MACA,MAAMmB,KAAK,GAAGF,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC7C,MAAMjB,QAAQ,GAAG,MAAMnB,KAAK,CAACqC,GAAG,CAAC,uCAAuC,EAAE;QACtEC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUZ,KAAK,EAAE,CAAE;QACtC,CAAC;QACDM,eAAe,EAAE;MACrB,CAAC,CAAC;MACF7B,GAAG,CAAC;QAAEC,IAAI,EAAEc,QAAQ,CAACE,IAAI,CAAChB,IAAI;QAAEC,eAAe,EAAE,IAAI;QAAEI,cAAc,EAAE;MAAM,CAAC,CAAC;IACnF,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA,IAAAgC,eAAA,EAAAC,oBAAA;MACZrC,GAAG,CAAC;QACAE,eAAe,EAAE,KAAK;QACtBI,cAAc,EAAE,KAAK;QACrBF,KAAK,EAAE,EAAAgC,eAAA,GAAAhC,KAAK,CAACW,QAAQ,cAAAqB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBnB,IAAI,cAAAoB,oBAAA,uBAApBA,oBAAA,CAAsB9B,OAAO,KAAI;MAC5C,CAAC,CAAC;IACN;EACJ,CAAC;EAED+B,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACA,MAAMvB,QAAQ,GAAG,MAAMnB,KAAK,CAACqC,GAAG,CAAC,qCAAqC,CAAC;MACvEjC,GAAG,CAAC;QAAEuC,KAAK,EAAExB,QAAQ,CAACE,IAAI,CAACsB;MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOnC,KAAK,EAAE;MACZoB,OAAO,CAACC,GAAG,CAACrB,KAAK,CAAC;IACtB;EACJ,CAAC;EAEDoC,QAAQ,EAAE,MAAAA,CAAOC,KAAK,EAAEC,WAAW,EAAEC,IAAI,EAAEC,KAAK,KAAK;IACjD,IAAI;MACA,MAAM7B,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,qCAAqC,EAAE;QAAEyB,KAAK;QAAEC,WAAW;QAAEC,IAAI;QAAEC;MAAM,CAAC,CAAC;MAC7G5C,GAAG,CAAC;QAAE6C,IAAI,EAAE9B,QAAQ,CAAC8B;MAAK,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACZoB,OAAO,CAACC,GAAG,CAACrB,KAAK,CAAC;IACtB;EACJ;AACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}